<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:tb="http://www.hardcodet.net/taskbar"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:chxaml ="clr-namespace:ChimeHelperUX.XAMLExtenders"
                    xmlns:local="clr-namespace:ChimeHelperUX"
                    >

  <chxaml:BoolToObjectConverter x:Key="BoolToVisibilityConverter" TrueValue="Visible" FalseValue="Collapsed"/>
  <chxaml:BoolToObjectConverter x:Key="InverseBoolToVisibilityConverter" TrueValue="Collapsed" FalseValue="Visible"/>

  <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0.95">
            <StackPanel ClipToBounds="True" IsItemsHost="True" Margin="5,4,5,4"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- SimpleStyles: MenuItem -->

  <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
    <Setter Property="Height" Value="1"/>
    <Setter Property="Margin" Value="0,4,0,4"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border BorderBrush="#888888" BorderThickness="1"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- TopLevelHeader -->

  <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
    <Border Name="Border" >
      <Grid>
        <ContentPresenter 
        Margin="6,3,6,3" 
        ContentSource="Header"
        RecognizesAccessKey="True" />
        <Popup 
        Name="Popup"
        Placement="Bottom"
        IsOpen="{TemplateBinding IsSubmenuOpen}"
        AllowsTransparency="True" 
        Focusable="False"
        PopupAnimation="Fade">
          <Border 
          Name="SubmenuBorder"
          SnapsToDevicePixels="True"
          Background="#FFFFFF"
          BorderBrush="#888888"
          BorderThickness="1" >
            <StackPanel  
            IsItemsHost="True" 
            KeyboardNavigation.DirectionalNavigation="Cycle" />
          </Border>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsSuspendingPopupAnimation" Value="true">
        <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
      </Trigger>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter TargetName="Border" Property="Background" Value="#C0C0C0"/>
        <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
      </Trigger>
      <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
        <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,4,4"/>
        <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="#888888"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <!-- TopLevelItem -->

  <ControlTemplate 
  x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" 
  TargetType="{x:Type MenuItem}">
    <Border Name="Border" >
      <Grid>
        <ContentPresenter 
        Margin="6,3,6,3" 
        ContentSource="Header"
        RecognizesAccessKey="True" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter TargetName="Border" Property="Background" Value="#C0C0C0"/>
        <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="#888888"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <!-- SubmenuItem -->

  <ControlTemplate 
  x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" 
  TargetType="{x:Type MenuItem}">
    <Border Name="Border" >
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="5" SharedSizeGroup="Icon"/>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="0" SharedSizeGroup="Shortcut"/>
          <ColumnDefinition Width="5"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter 
        Name="Icon"
        Margin="6,0,6,0"
        VerticalAlignment="Center"
        ContentSource="Icon"/>
        <Border 
        Name="Check"  
        Width="13" Height="13" 
        Visibility="Collapsed"
        Margin="6,0,6,0" 
        Background="#C0C0C0"
        BorderThickness="1"
        BorderBrush="#404040">
          <Path 
          Name="CheckMark"
          Width="7" Height="7" 
          Visibility="Hidden" 
          SnapsToDevicePixels="False" 
          Stroke="#404040"
          StrokeThickness="2"
          Data="M 0 0 L 7 7 M 0 7 L 7 0" />
        </Border>
        <ContentPresenter 
        Name="HeaderHost"
        Grid.Column="1"
        ContentSource="Header"
        RecognizesAccessKey="True"/>
        <TextBlock x:Name="InputGestureText"
        Grid.Column="2"
        Text="{TemplateBinding InputGestureText}"
        Margin="5,2,0,2"
        DockPanel.Dock="Right" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="true">
        <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="IsCheckable" Value="true">
        <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
      </Trigger>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter TargetName="Border" Property="Background" Value="#DDDDDD"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="#888888"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <!-- SubmenuHeader -->

  <ControlTemplate 
  x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" 
  TargetType="{x:Type MenuItem}">
    <Border Name="Border" >
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
          <ColumnDefinition Width="13"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter 
        Name="Icon"
        Margin="6,0,6,0"
        VerticalAlignment="Center"
        ContentSource="Icon"/>
        <ContentPresenter 
        Name="HeaderHost"
        Grid.Column="1"
        ContentSource="Header"
        RecognizesAccessKey="True"/>
        <TextBlock x:Name="InputGestureText"
        Grid.Column="2"
        Text="{TemplateBinding InputGestureText}"
        Margin="5,2,2,2"
        DockPanel.Dock="Right"/>
        <Path 
        Grid.Column="3"
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        Data="M 0 0 L 0 7 L 4 3.5 Z" 
        Fill="#404040" />
        <Popup 
        Name="Popup"
        Placement="Right"
        HorizontalOffset="-4" 
        IsOpen="{TemplateBinding IsSubmenuOpen}"
        AllowsTransparency="True" 
        Focusable="False"
        PopupAnimation="Fade">
          <Border 
          Name="SubmenuBorder"
          SnapsToDevicePixels="True"
          Background="#FFFFFF"
          BorderBrush="#888888"
          BorderThickness="1" >
            <StackPanel  
            IsItemsHost="True" 
            KeyboardNavigation.DirectionalNavigation="Cycle" />
          </Border>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter TargetName="Border" Property="Background" Value="#DDDDDD"/>
      </Trigger>
      <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
        <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="4"/>
        <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="#888888"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <!-- MenuItem Style -->

  <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Style.Triggers>
      <Trigger Property="Role" Value="TopLevelHeader">
        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
      </Trigger>
      <Trigger Property="Role" Value="TopLevelItem">
        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
      </Trigger>
      <Trigger Property="Role" Value="SubmenuHeader">
        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
      </Trigger>
      <Trigger Property="Role" Value="SubmenuItem">
        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <DataTemplate x:Key="MenuItemTemplate">
    <StackPanel>
      <Button x:Name="ChimeMeeting" Command="{Binding JoinMeetingCommand}" CommandParameter="{Binding}" DockPanel.Dock="Top" Background="Transparent" BorderThickness="0" Foreground="White" HorizontalContentAlignment="Left">

        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
            <ColumnDefinition />
            <ColumnDefinition />
            <ColumnDefinition />
            <ColumnDefinition />
            <ColumnDefinition MaxWidth="400"></ColumnDefinition>
          </Grid.ColumnDefinitions>

          <TextBlock Text="{Binding StartTime, StringFormat={}{0:HH:mm}}" Grid.Column="0"></TextBlock>
          <TextBlock Grid.Column="1" Margin="2,0,2,0">-</TextBlock>
          <TextBlock Text="{Binding EndTime, StringFormat={}{0:HH:mm}}" Grid.Column="2"></TextBlock>
          <Border Grid.Column="3" Width="1" Background="White" Margin="5,0,5,0" />
          <TextBlock Text="{Binding Pin}" Grid.Column="4" />
          <Border Grid.Column="5" Width="1" Background="White" Margin="5,0,5,0" />
          <TextBlock Text="{Binding Subject}" Grid.Column="6" TextTrimming="CharacterEllipsis"></TextBlock>

        </Grid>

      </Button>
      <Button x:Name="NoMeetings" DockPanel.Dock="Top" Background="Transparent" BorderThickness="0" Foreground="White" HorizontalContentAlignment="Left">
        <TextBlock Text="{Binding Subject}"/>
      </Button>
    </StackPanel>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding IsEmpty}" Value="True">
        <Setter TargetName="ChimeMeeting" Property="Visibility" Value="Collapsed"></Setter>
        <Setter TargetName="NoMeetings" Property="Visibility" Value="Visible"></Setter>
      </DataTrigger>
      <DataTrigger Binding="{Binding IsEmpty}" Value="False">
        <Setter TargetName="ChimeMeeting" Property="Visibility" Value="Visible"></Setter>
        <Setter TargetName="NoMeetings" Property="Visibility" Value="Collapsed"></Setter>
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>

  <tb:TaskbarIcon x:Name="ChimeHelperTaskbarIcon" x:Key="ChimeHelperTaskbarIcon"
      IconSource="{Binding IconSource}"
      ToolTipText="{Binding ToolTipText}"
      >

    <tb:TaskbarIcon.DataContext>
      <local:ChimeMeetingMenuItems></local:ChimeMeetingMenuItems>
    </tb:TaskbarIcon.DataContext>

    <tb:TaskbarIcon.TrayPopup>
      <StackPanel MaxWidth="750">

        <Border Height="50" Background="#192A38">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition/>
              <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition/>
            </Grid.RowDefinitions>

            <StackPanel Orientation="Horizontal" Grid.Row="0" Grid.Column="0">
              <Image Height="28" Width="28" Source="/Icons/fan.ico" Margin="10,0,0,0"></Image>
              <TextBlock VerticalAlignment="Center" FontSize="25" Foreground="White" FontWeight="Light" Margin="5,0,0,0">Chime Helper</TextBlock>
            </StackPanel>

            <TextBlock Grid.Row="0" Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Bottom" Padding="0,0,5,0">
              <Hyperlink Foreground="White" Command="{Binding StartMeetingMenuCommand}" 
                         CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Popup}}">Meet Now</Hyperlink>
            </TextBlock>
          </Grid>
        </Border>

        <Border Height="30" Background="OrangeRed" Visibility="{Binding UpdateState.UpdateAvailable, Converter={StaticResource BoolToVisibilityConverter}}">

          <StackPanel VerticalAlignment="Center">
            <TextBlock HorizontalAlignment="Center" FontSize="16" FontWeight="Bold">
              <Hyperlink Foreground="White" Command="{Binding UpdateNowCommand}"
                           CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Popup}}">Update Available! Click here to update</Hyperlink>
            </TextBlock>
          </StackPanel>
        </Border>

        <DataGrid x:Name="ChimeMeetings" ItemsSource="{Binding}" 
                  AutoGenerateColumns="False" SelectionMode="Single" 
                  CanUserAddRows="False" CanUserResizeColumns="False" CanUserReorderColumns="False" 
                  CanUserSortColumns="False" CanUserResizeRows="False"
                  HorizontalGridLinesBrush="Transparent" VerticalGridLinesBrush="LightGray"
                  Background="#192a38" RowHeaderWidth="0"
                  Visibility="{Binding IsEmpty, Converter={StaticResource InverseBoolToVisibilityConverter}}"
                  >
          <DataGrid.Resources>
            <Style TargetType="{x:Type DataGridCell}">
              <Style.Triggers>
                <Trigger Property="DataGridCell.IsSelected" Value="True">
                  <Setter Property="Background" Value="White" />
                  <Setter Property="BorderBrush" Value="White"/>
                  <Setter Property="Foreground" Value="Black"/>
                </Trigger>
              </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type DataGridRow}">
              <Style.Triggers>
                <Trigger Property="DataGridCell.IsSelected" Value="True">
                  <Setter Property="Background" Value="#CCDAFF" />
                  <Setter Property="BorderBrush" Value="White"/>
                  <Setter Property="Foreground" Value="Black"/>
                </Trigger>
              </Style.Triggers>
            </Style>
          </DataGrid.Resources>
          <DataGrid.ColumnHeaderStyle>
            <Style>
              <Setter Property="Control.Background" Value="White"/>
              <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
              <Setter Property="Control.FontWeight" Value="Bold"/>
              <Setter Property="Control.Padding" Value="0,5,0,5"/>
            </Style>
          </DataGrid.ColumnHeaderStyle>
          <DataGrid.RowStyle>
            <Style TargetType="DataGridRow">
              <Setter Property="Background" Value="White"></Setter>
              <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                  <Setter Property="Background" Value="#007980" />
                  <Setter Property="Foreground" Value="White"/>
                  <Setter Property="Cursor" Value="Hand"/>
                </Trigger>
              </Style.Triggers>
            </Style>
          </DataGrid.RowStyle>
          <DataGrid.Columns>
            <DataGridTemplateColumn Header="Start" MinWidth="50">
              <DataGridTemplateColumn.CellTemplate>
                <DataTemplate>
                  <TextBlock Text="{Binding StartTime, StringFormat={}{0:HH:mm}}" Margin="5,0,5,0" HorizontalAlignment="Center"></TextBlock>
                </DataTemplate>
              </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn Header="End">
              <DataGridTemplateColumn.CellTemplate>
                <DataTemplate>
                  <TextBlock Text="{Binding EndTime, StringFormat={}{0:HH:mm}}" Margin="5,0,5,0" HorizontalAlignment="Center"></TextBlock>
                </DataTemplate>
              </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn Header="Pin">
              <DataGridTemplateColumn.CellTemplate>
                <DataTemplate>
                  <TextBlock Text="{Binding Pin}" Margin="5,0,5,0" HorizontalAlignment="Center" />
                </DataTemplate>
              </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn Header="Meeting">
              <DataGridTemplateColumn.CellTemplate>
                <DataTemplate>
                  <TextBlock Text="{Binding Subject}" TextTrimming="CharacterEllipsis" Margin="5,0,5,0"></TextBlock>
                </DataTemplate>
              </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
          </DataGrid.Columns>
          <i:Interaction.Triggers>
            <i:EventTrigger EventName="SelectionChanged">
              <i:InvokeCommandAction Command="{Binding JoinMeetingCommand}" 
                CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}" />
            </i:EventTrigger>
          </i:Interaction.Triggers>

        </DataGrid>
        <TextBlock MaxWidth="450" Background="White" Padding="10,10,10,20" TextWrapping="Wrap" Visibility="{Binding IsEmpty, Converter={StaticResource BoolToVisibilityConverter}}">
            There are no current meetings with Chime pins in your Outlook calendar that we could detect. By default we only consider meetings from a full hour ago to a full hour in the future, for example at 10:05 am we would look for meetings that are in progress between 9am to 12pm.
            <LineBreak/>
            <LineBreak/>
            If you believe that we've missed something, please <chxaml:HyperlinkAuto NavigateUri="https://github.com/nachmore/AmazonChimeHelper/issues/new">open an Issue</chxaml:HyperlinkAuto> with some example text.
        </TextBlock>
      </StackPanel>
    </tb:TaskbarIcon.TrayPopup>

    <!-- Set a simple context menu  -->
    <tb:TaskbarIcon.ContextMenu>
      <ContextMenu
            Background="#192a38" Foreground="White" Margin="0" BorderBrush="#007980" BorderThickness="1" ItemTemplate="{StaticResource MenuItemTemplate}" UsesItemContainerTemplate="True">

        <MenuItem Header="Update Available!" Foreground="OrangeRed" Command="{Binding UpdateNowCommand}" Visibility="{Binding UpdateState.UpdateAvailable, Converter={StaticResource BoolToVisibilityConverter}}"/>
        <Separator Visibility="{Binding UpdateState.UpdateAvailable, Converter={StaticResource BoolToVisibilityConverter}}"/>

        <MenuItem Header="Start Meeting (Personal ID)" Command="{Binding StartMeetingMenuCommand}"/>
        <MenuItem Header="Join Meeting" Command="{Binding ShowJoinMeetingDialogMenuCommand}"/>
        <Separator/>
        <MenuItem Header="Copy Short Chime String" Command="{Binding ShortChimeStringMenuCommand}"/>
        <MenuItem Header="Copy Full Chime String" Command="{Binding FullChimeStringMenuCommand}"/>
        <Separator/>
        <MenuItem Header="Settings" Command="{Binding SettingsMenuCommand}"/>
        <MenuItem Header="Check For Meetings Now" Command="{Binding CheckNowMenuCommand}"/>
        <Separator/>
        <MenuItem Header="About" Command="{Binding AboutMenuCommand}"/>
        <MenuItem Header="Exit" Command="{Binding ExitMenuCommand}"/>
      </ContextMenu>
    </tb:TaskbarIcon.ContextMenu>
  </tb:TaskbarIcon>
</ResourceDictionary>